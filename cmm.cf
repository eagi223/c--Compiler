comment "//" ;
comment "/*" "*/" ;

Prog. Program  ::= [Function] ;
Fun.  Function ::= Type Ident "(" [Decl] ")" "{" [Stm] "}" ;
Dec.  Decl     ::= Type [Ident] ;

terminator Function "" ;
terminator Stm "" ;
separator  Decl "," ;
separator  nonempty Ident "," ;

SDecl.   Stm ::= Decl ";"  ;
SExp.    Stm ::= Exp ";" ;
SBlock.  Stm ::= "{" [Stm] "}" ;
SWhile.  Stm ::= "while" "(" Exp ")" Stm ;
SIf.	 Stm ::= "if" "(" Exp ")" Stm ;
SDo.     Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
SIfElse. Stm ::= "if" "(" Exp ")" Stm "else" Stm;
SFor2.   Stm ::= "for" "(" Exp ";" Exp ")" Stm;
SFor3.   Stm ::= "for" "(" Exp ";" Exp ";" Exp ")" Stm;
SReturn. Stm ::= "return" Exp  ";" ;

EAss.    Exp  ::= Ident "=" Exp ;
ELt.     Exp1 ::= Exp2 "<" Exp2 ;
EGt.	 Exp1 ::= Exp2 ">" Exp2 ;
EEq.	 Exp1 ::= Exp2 "==" Exp2 ;
EInc.	 Exp1 ::= Exp1 "++";
EDec.	 Exp1 ::= Exp1 "--";
EAdd.    Exp2 ::= Exp2 "+" Exp3 ;
ESub.    Exp2 ::= Exp2 "-" Exp3 ;
EMul.    Exp3 ::= Exp3 "*" Exp4 ;
EDiv.	 Exp3 ::= Exp3 "/" Exp4 ;
Call.    Exp4 ::= Ident "(" [Exp] ")" ;
EVar.    Exp4 ::= Ident ;
EStr.    Exp4 ::= String ;
EInt.    Exp4 ::= Integer ;
EDouble. Exp4 ::= Double ;

coercions Exp 4 ;

separator Exp "," ;

TInt.    Type ::= "int" ;
TDouble. Type ::= "double" ;
